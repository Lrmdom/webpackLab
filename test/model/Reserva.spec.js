/*
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerJsClient);
  }
})(this, function (expect, SwaggerJsClient) {
  "use strict";

  var instance;

  describe("(package)", function () {
    describe("Reserva", function () {
      beforeEach(function () {
        instance = new SwaggerJsClient.Reserva();
      });

      it("should create an instance of Reserva", function () {
        // TODO: update the code to test Reserva
        expect(instance).to.be.a(SwaggerJsClient.Reserva);
      });

      it('should have the property id (base name: "id")', function () {
        // TODO: update the code to test the property id
        expect(instance).to.have.property("id");
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property nPrereserva (base name: "nPrereserva")', function () {
        // TODO: update the code to test the property nPrereserva
        expect(instance).to.have.property("nPrereserva");
        // expect(instance.nPrereserva).to.be(expectedValueLiteral);
      });

      it('should have the property reservado (base name: "reservado")', function () {
        // TODO: update the code to test the property reservado
        expect(instance).to.have.property("reservado");
        // expect(instance.reservado).to.be(expectedValueLiteral);
      });

      it('should have the property valor (base name: "valor")', function () {
        // TODO: update the code to test the property valor
        expect(instance).to.have.property("valor");
        // expect(instance.valor).to.be(expectedValueLiteral);
      });

      it('should have the property nCheque (base name: "nCheque")', function () {
        // TODO: update the code to test the property nCheque
        expect(instance).to.have.property("nCheque");
        // expect(instance.nCheque).to.be(expectedValueLiteral);
      });

      it('should have the property valorsinal (base name: "valorsinal")', function () {
        // TODO: update the code to test the property valorsinal
        expect(instance).to.have.property("valorsinal");
        // expect(instance.valorsinal).to.be(expectedValueLiteral);
      });

      it('should have the property idcliente (base name: "idcliente")', function () {
        // TODO: update the code to test the property idcliente
        expect(instance).to.have.property("idcliente");
        // expect(instance.idcliente).to.be(expectedValueLiteral);
      });

      it('should have the property idpreco (base name: "idpreco")', function () {
        // TODO: update the code to test the property idpreco
        expect(instance).to.have.property("idpreco");
        // expect(instance.idpreco).to.be(expectedValueLiteral);
      });

      it('should have the property tipopagamento (base name: "tipopagamento")', function () {
        // TODO: update the code to test the property tipopagamento
        expect(instance).to.have.property("tipopagamento");
        // expect(instance.tipopagamento).to.be(expectedValueLiteral);
      });

      it('should have the property nPagamento (base name: "nPagamento")', function () {
        // TODO: update the code to test the property nPagamento
        expect(instance).to.have.property("nPagamento");
        // expect(instance.nPagamento).to.be(expectedValueLiteral);
      });

      it('should have the property reservaState (base name: "reservaState")', function () {
        // TODO: update the code to test the property reservaState
        expect(instance).to.have.property("reservaState");
        // expect(instance.reservaState).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function () {
        // TODO: update the code to test the property data
        expect(instance).to.have.property("data");
        // expect(instance.data).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function () {
        // TODO: update the code to test the property user
        expect(instance).to.have.property("user");
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property eventid (base name: "eventid")', function () {
        // TODO: update the code to test the property eventid
        expect(instance).to.have.property("eventid");
        // expect(instance.eventid).to.be(expectedValueLiteral);
      });

      it('should have the property reservas (base name: "reservas")', function () {
        // TODO: update the code to test the property reservas
        expect(instance).to.have.property("reservas");
        // expect(instance.reservas).to.be(expectedValueLiteral);
      });
    });
  });
});
