/*
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD.
    define(["expect.js", "../../src/index"], factory);
  } else if (typeof module === "object" && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require("expect.js"), require("../../src/index"));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerJsClient);
  }
})(this, function (expect, SwaggerJsClient) {
  "use strict";

  var instance;

  describe("(package)", function () {
    describe("ClienteJsonld", function () {
      beforeEach(function () {
        instance = new SwaggerJsClient.ClienteJsonld();
      });

      it("should create an instance of ClienteJsonld", function () {
        // TODO: update the code to test ClienteJsonld
        expect(instance).to.be.a(SwaggerJsClient.ClienteJsonld);
      });

      it('should have the property context (base name: "@context")', function () {
        // TODO: update the code to test the property context
        expect(instance).to.have.property("context");
        // expect(instance.context).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "@id")', function () {
        // TODO: update the code to test the property id
        expect(instance).to.have.property("id");
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "@type")', function () {
        // TODO: update the code to test the property type
        expect(instance).to.have.property("type");
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property clienteid (base name: "clienteid")', function () {
        // TODO: update the code to test the property clienteid
        expect(instance).to.have.property("clienteid");
        // expect(instance.clienteid).to.be(expectedValueLiteral);
      });

      it('should have the property cliente (base name: "cliente")', function () {
        // TODO: update the code to test the property cliente
        expect(instance).to.have.property("cliente");
        // expect(instance.cliente).to.be(expectedValueLiteral);
      });

      it('should have the property senha (base name: "senha")', function () {
        // TODO: update the code to test the property senha
        expect(instance).to.have.property("senha");
        // expect(instance.senha).to.be(expectedValueLiteral);
      });

      it('should have the property senhaRepeat (base name: "senhaRepeat")', function () {
        // TODO: update the code to test the property senhaRepeat
        expect(instance).to.have.property("senhaRepeat");
        // expect(instance.senhaRepeat).to.be(expectedValueLiteral);
      });

      it('should have the property salt (base name: "salt")', function () {
        // TODO: update the code to test the property salt
        expect(instance).to.have.property("salt");
        // expect(instance.salt).to.be(expectedValueLiteral);
      });

      it('should have the property telefone (base name: "telefone")', function () {
        // TODO: update the code to test the property telefone
        expect(instance).to.have.property("telefone");
        // expect(instance.telefone).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function () {
        // TODO: update the code to test the property email
        expect(instance).to.have.property("email");
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property morada (base name: "morada")', function () {
        // TODO: update the code to test the property morada
        expect(instance).to.have.property("morada");
        // expect(instance.morada).to.be(expectedValueLiteral);
      });

      it('should have the property codPostal (base name: "codPostal")', function () {
        // TODO: update the code to test the property codPostal
        expect(instance).to.have.property("codPostal");
        // expect(instance.codPostal).to.be(expectedValueLiteral);
      });

      it('should have the property localidade (base name: "localidade")', function () {
        // TODO: update the code to test the property localidade
        expect(instance).to.have.property("localidade");
        // expect(instance.localidade).to.be(expectedValueLiteral);
      });

      it('should have the property conflito1 (base name: "conflito1")', function () {
        // TODO: update the code to test the property conflito1
        expect(instance).to.have.property("conflito1");
        // expect(instance.conflito1).to.be(expectedValueLiteral);
      });

      it('should have the property conflito2 (base name: "conflito2")', function () {
        // TODO: update the code to test the property conflito2
        expect(instance).to.have.property("conflito2");
        // expect(instance.conflito2).to.be(expectedValueLiteral);
      });

      it('should have the property conflito3 (base name: "conflito3")', function () {
        // TODO: update the code to test the property conflito3
        expect(instance).to.have.property("conflito3");
        // expect(instance.conflito3).to.be(expectedValueLiteral);
      });

      it('should have the property sessid (base name: "sessid")', function () {
        // TODO: update the code to test the property sessid
        expect(instance).to.have.property("sessid");
        // expect(instance.sessid).to.be(expectedValueLiteral);
      });

      it('should have the property activo (base name: "activo")', function () {
        // TODO: update the code to test the property activo
        expect(instance).to.have.property("activo");
        // expect(instance.activo).to.be(expectedValueLiteral);
      });

      it('should have the property pais (base name: "pais")', function () {
        // TODO: update the code to test the property pais
        expect(instance).to.have.property("pais");
        // expect(instance.pais).to.be(expectedValueLiteral);
      });

      it('should have the property subscribeNewsletter (base name: "subscribeNewsletter")', function () {
        // TODO: update the code to test the property subscribeNewsletter
        expect(instance).to.have.property("subscribeNewsletter");
        // expect(instance.subscribeNewsletter).to.be(expectedValueLiteral);
      });

      it('should have the property facebookAccount (base name: "facebookAccount")', function () {
        // TODO: update the code to test the property facebookAccount
        expect(instance).to.have.property("facebookAccount");
        // expect(instance.facebookAccount).to.be(expectedValueLiteral);
      });

      it('should have the property fbId (base name: "fbId")', function () {
        // TODO: update the code to test the property fbId
        expect(instance).to.have.property("fbId");
        // expect(instance.fbId).to.be(expectedValueLiteral);
      });
    });
  });
});
