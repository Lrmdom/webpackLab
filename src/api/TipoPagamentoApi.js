/*
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.32
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { InlineResponse20022 } from "../model/InlineResponse20022";
import { TipoPagamento } from "../model/TipoPagamento";
import { TipoPagamentoJsonld } from "../model/TipoPagamentoJsonld";

/**
 * TipoPagamento service.
 * @module api/TipoPagamentoApi
 * @version 0.0.0
 */
export class TipoPagamentoApi {
  /**
    * Constructs a new TipoPagamentoApi. 
    * @alias module:api/TipoPagamentoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the deleteTipoPagamentoItem operation.
   * @callback moduleapi/TipoPagamentoApi~deleteTipoPagamentoItemCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Removes the TipoPagamento resource.
   * Removes the TipoPagamento resource.
   * @param {String} id Resource identifier
   * @param {module:api/TipoPagamentoApi~deleteTipoPagamentoItemCallback} callback The callback function, accepting three arguments: error, data, response
   */
  deleteTipoPagamentoItem(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling deleteTipoPagamentoItem"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos/{id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getTipoPagamentoCollection operation.
   * @callback moduleapi/TipoPagamentoApi~getTipoPagamentoCollectionCallback
   * @param {String} error Error message, if any.
   * @param {module:model/InlineResponse20022{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Retrieves the collection of TipoPagamento resources.
   * Retrieves the collection of TipoPagamento resources.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.page The collection page number (default to <.>)
   * @param {module:api/TipoPagamentoApi~getTipoPagamentoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getTipoPagamentoCollection(opts, callback) {
    opts = opts || {};
    let postBody = null;

    let pathParams = {};
    let queryParams = {
      page: opts["page"],
    };
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/ld+json", "application/json", "text/html"];
    let returnType = InlineResponse20022;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the getTipoPagamentoItem operation.
   * @callback moduleapi/TipoPagamentoApi~getTipoPagamentoItemCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TipoPagamentoJsonld{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Retrieves a TipoPagamento resource.
   * Retrieves a TipoPagamento resource.
   * @param {String} id Resource identifier
   * @param {module:api/TipoPagamentoApi~getTipoPagamentoItemCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  getTipoPagamentoItem(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling getTipoPagamentoItem"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["application/ld+json", "application/json", "text/html"];
    let returnType = TipoPagamentoJsonld;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the patchTipoPagamentoItem operation.
   * @callback moduleapi/TipoPagamentoApi~patchTipoPagamentoItemCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TipoPagamentoJsonld{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Updates the TipoPagamento resource.
   * Updates the TipoPagamento resource.
   * @param {module:model/TipoPagamento} body The updated TipoPagamento resource
   * @param {String} id Resource identifier
   * @param {module:api/TipoPagamentoApi~patchTipoPagamentoItemCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  patchTipoPagamentoItem(body, id, callback) {
    let postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling patchTipoPagamentoItem"
      );
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling patchTipoPagamentoItem"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/merge-patch+json"];
    let accepts = ["application/ld+json", "application/json", "text/html"];
    let returnType = TipoPagamentoJsonld;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos/{id}",
      "PATCH",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the postTipoPagamentoCollection operation.
   * @callback moduleapi/TipoPagamentoApi~postTipoPagamentoCollectionCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TipoPagamentoJsonld{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Creates a TipoPagamento resource.
   * Creates a TipoPagamento resource.
   * @param {module:model/TipoPagamentoJsonld} body The new TipoPagamento resource
   * @param {module:api/TipoPagamentoApi~postTipoPagamentoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  postTipoPagamentoCollection(body, callback) {
    let postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling postTipoPagamentoCollection"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/ld+json", "application/json", "text/html"];
    let accepts = ["application/ld+json", "application/json", "text/html"];
    let returnType = TipoPagamentoJsonld;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the putTipoPagamentoItem operation.
   * @callback moduleapi/TipoPagamentoApi~putTipoPagamentoItemCallback
   * @param {String} error Error message, if any.
   * @param {module:model/TipoPagamentoJsonld{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Replaces the TipoPagamento resource.
   * Replaces the TipoPagamento resource.
   * @param {module:model/TipoPagamentoJsonld} body The updated TipoPagamento resource
   * @param {String} id Resource identifier
   * @param {module:api/TipoPagamentoApi~putTipoPagamentoItemCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  putTipoPagamentoItem(body, id, callback) {
    let postBody = body;
    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error(
        "Missing the required parameter 'body' when calling putTipoPagamentoItem"
      );
    }
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling putTipoPagamentoItem"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/ld+json", "application/json", "text/html"];
    let accepts = ["application/ld+json", "application/json", "text/html"];
    let returnType = TipoPagamentoJsonld;

    return this.apiClient.callApi(
      "/api/tipo_pagamentos/{id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
